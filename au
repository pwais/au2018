#!/usr/bin/env python
# vim: tabstop=2 shiftwidth=2 expandtab

import os
import subprocess
import sys

## Logging
import logging
LOG_FORMAT = "%(asctime)s\t%(name)-4s %(process)d : %(message)s"
log = logging.getLogger("au")
log.setLevel(logging.INFO)
console_handler = logging.StreamHandler(sys.stderr)
console_handler.setFormatter(logging.Formatter(LOG_FORMAT))
log.addHandler(console_handler)

AU_ROOT = os.environ.get(
  'AU_ROOT', 
  os.path.dirname(os.path.abspath(__file__)))

DOCKER_IMAGE = 'gcr.io/avian-augury-217704/env:v1'

## Utils

def run_cmd(cmd):
  cmd = cmd.replace('\n', '').strip()
  log.info("Running %s ..." % cmd)
  subprocess.check_call(cmd, shell=True)
  log.info("... done with %s " % cmd)


## Env

class DockerEnv(object):
  
  @classmethod
  def build(cls):
    run_cmd(
      'docker build -t ' + DOCKER_IMAGE + ' -f ' + AU_ROOT + '/docker/Dockerfile ' + AU_ROOT)
    run_cmd(
      'docker push ' + DOCKER_IMAGE)

  @classmethod
  def shell(cls):
    CMD = """
      docker run
        --name au2
        -d -it -P
        --net=host
        -v `pwd`:/opt/au
        -v /:/outer_root
        -w /opt/au
        --env my.env
        --privileged %s sleep infinity || true
    """ % DOCKER_IMAGE
    run_cmd(CMD)
    
    # https://github.com/moby/moby/issues/33794#issuecomment-323003975
    EXEC_CMD = 'docker exec -it au2 bash'#-c "export COLUMNS=`tput cols`; export LINES=`tput lines`; exec bash"'
    os.execvp("docker", EXEC_CMD.split(' '))

## Services

def alluxio_start_master():
  log.info("ALLUXIO_MASTER_HOSTNAME: %s" % os.environ.get('ALLUXIO_MASTER_HOSTNAME'))
  
  MASTER_CMD = '/opt/alluxio/integration/docker/bin/alluxio-master.sh >> /var/log/alluxio-master &'
  run_cmd(MASTER_CMD)
   
  GCS_ACCESS_KEY_ID = os.environ.get('GCS_ACCESS_KEY_ID')
  GCS_SECRET_ACCESS_KEY = os.environ.get('GCS_SECRET_ACCESS_KEY')
  assert GCS_ACCESS_KEY_ID
  MOUNT_CMD = """
    /opt/alluxio/bin/alluxio fs mount
      --option fs.gcs.accessKeyId=%s
      --option fs.gcs.secretAccessKey=%s
      /gcs
      gs://au2018gs/au2018
  """ % (GCS_ACCESS_KEY_ID, GCS_SECRET_ACCESS_KEY)
  run_cmd(MOUNT_CMD)

def alluxio_start_worker():
  CMD = """
    mkdir /mnt/ramdisk &&
    mount -t ramfs -o size=1G ramfs /mnt/ramdisk &&
    chmod a+w /mnt/ramdisk
  """
  run_cmd(CMD)
  
  CMD = '/opt/alluxio/integration/docker/bin/alluxio-worker.sh >> /var/log/alluxio-worker &'
  run_cmd(CMD)

## CLI

def create_arg_parser():
  import argparse
  
  parser = argparse.ArgumentParser()
  parser.add_argument(
    '--shell', default=False, action='store_true',
    help='Drop into a dockerized dev env shell')
  parser.add_argument(
    '--build-env', default=False, action='store_true',
    help='Build the dockerized dev env image %s' % DOCKER_IMAGE)
  
  return parser

def main(args=None):
  if not args:
    parser = create_arg_parser()
    args = parser.parse_args()
  
  if args.build_env:
    DockerEnv.build()
  elif args.shell:
    DockerEnv.shell()

if __name__ == '__main__':
  main()
