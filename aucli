#!/usr/bin/env python
# vim: tabstop=2 shiftwidth=2 expandtab

import os
import subprocess
import sys

## Logging
import logging
LOG_FORMAT = "%(asctime)s\t%(name)-4s %(process)d : %(message)s"
log = logging.getLogger("au")
log.setLevel(logging.INFO)
console_handler = logging.StreamHandler(sys.stderr)
console_handler.setFormatter(logging.Formatter(LOG_FORMAT))
log.addHandler(console_handler)

AU_ROOT = os.environ.get(
  'AU_ROOT', 
  os.path.dirname(os.path.abspath(__file__)))

DOCKER_IMAGE = 'gcr.io/avian-augury-217704/env:v1'

## Utils

def run_cmd(cmd):
  cmd = cmd.replace('\n', '').strip()
  log.info("Running %s ..." % cmd)
  subprocess.check_call(cmd, shell=True)
  log.info("... done with %s " % cmd)


## Env

class DockerEnv(object):
  
  @classmethod
  def build(cls):
    run_cmd(
      'docker build -t ' + DOCKER_IMAGE + ' -f ' + AU_ROOT + '/docker/Dockerfile ' + AU_ROOT)
    run_cmd(
      'docker push ' + DOCKER_IMAGE)

  @classmethod
  def shell(cls):
    have_nvidia_docker = False
    try:
      run_cmd('nvidia-docker --help')
    except Exception:
      log.info("Not using nvidia-docker")
    
    docker = 'nvidia-docker' if have_nvidia_docker else 'docker'
    CMD = """
      %s run
        --name au2
        -d -it -P
        --net=host
        --shm-size 1G
        -v `pwd`:/opt/au
        -v /:/outer_root
        -w /opt/au
        --env my.env
        --privileged %s sleep infinity || docker start au2 || true
    """ % (docker, DOCKER_IMAGE)
    run_cmd(CMD)
    
    # https://github.com/moby/moby/issues/33794#issuecomment-323003975
    EXEC_CMD = 'docker exec -it au2 bash'#-c "export COLUMNS=`tput cols`; export LINES=`tput lines`; exec bash"'
    os.execvp("docker", EXEC_CMD.split(' '))


## External Projects

def setup_tf_models():
  # Do https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/installation.md#manual-protobuf-compiler-installation-and-usage
  run_cmd("""
    ls -lhat /opt/au/external/tensorflow_models/research/object_detection/protos/train_pb2.py ||
      ( mkdir -p /opt/protobuf3 ;
        cd /opt/protobuf3 &&
        wget -O protobuf.zip https://github.com/google/protobuf/releases/download/v3.0.0/protoc-3.0.0-linux-x86_64.zip &&
        unzip protobuf.zip &&
        cd - &&
        cd /opt/au/external/tensorflow_models/research &&
        /opt/protobuf3/bin/protoc object_detection/protos/*.proto --python_out=. &&
        python object_detection/builders/model_builder_test.py )
    """)
  
  run_cmd("""
    ls -lhat /tmp/raw-data &&
    bash object_detection/dataset_tools/download_and_preprocess_mscoco.sh /tmp
  """)



## Services

def test_spark():
  import findspark
  findspark.init()
  import pyspark
  import random
  conf = pyspark.SparkConf()
  conf.setAppName('pi_test')
  conf.setMaster('local[4]')
  conf.set('spark.driver.bindAddress', '127.0.0.1')
  sc = pyspark.SparkContext(conf=conf)
  num_samples = 1000000
  def inside(p):     
    x, y = random.random(), random.random()
    return x*x + y*y < 1
  count = sc.parallelize(range(0, num_samples)).filter(inside).count()
  sc.stop()
  pi = 4 * float(count) / num_samples
  print("Pi estimate: %s" % pi)
  assert abs(pi - 3.14) < 0.1
  

def alluxio_start_master():
  run_cmd("""
    mkdir /mnt/ramdisk &&
    mount -t ramfs -o size=1G ramfs /mnt/ramdisk &&
    chmod a+w /mnt/ramdisk
  """)
  
  log.info("ALLUXIO_MASTER_HOSTNAME: %s" % os.environ.get('ALLUXIO_MASTER_HOSTNAME'))
  
  MASTER_CMD = '/opt/alluxio/integration/docker/bin/alluxio-master.sh >> /var/log/alluxio-master &'
  run_cmd(MASTER_CMD)
   
  GCS_ACCESS_KEY_ID = os.environ.get('GCS_ACCESS_KEY_ID')
  GCS_SECRET_ACCESS_KEY = os.environ.get('GCS_SECRET_ACCESS_KEY')
  assert GCS_ACCESS_KEY_ID
  run_cmd("""
    /opt/alluxio/bin/alluxio fs mount
      --option fs.gcs.accessKeyId=%s
      --option fs.gcs.secretAccessKey=%s
      /gcs
      gs://au2018gs/au2018
  """ % (GCS_ACCESS_KEY_ID, GCS_SECRET_ACCESS_KEY))

"""

ALLUXIO_MASTER_HOSTNAME=http://192.168.99.100 /opt/alluxio/bin/alluxio-start.sh local
/opt/alluxio/bin/alluxio runTests
/opt/alluxio/integration/fuse/bin/alluxio-fuse mount /mnt/alluxio
"""


def alluxio_start_worker():
  run_cmd("""
    mkdir /mnt/ramdisk &&
    mount -t ramfs -o size=1G ramfs /mnt/ramdisk &&
    chmod a+w /mnt/ramdisk
  """)
  
  run_cmd("""
    mkdir -p /opt/alluxio-fuse &&
    /opt/alluxio/integration/fuse/bin/alluxio-fuse mount /opt/alluxio-fuse
  """)
  
  run_cmd('/opt/alluxio/integration/docker/bin/alluxio-worker.sh >> /var/log/alluxio-worker &')

## CLI

def create_arg_parser():
  import argparse
  
  parser = argparse.ArgumentParser()
  parser.add_argument(
    '--shell', default=False, action='store_true',
    help='Drop into a dockerized dev env shell')
  parser.add_argument(
    '--build-env', default=False, action='store_true',
    help='Build the dockerized dev env image %s' % DOCKER_IMAGE)
  parser.add_argument(
    '--alluxio-master', default=False, action='store_true',
    help='Start Alluxio master node')
  
  return parser

def main(args=None):
  if not args:
    parser = create_arg_parser()
    args = parser.parse_args()
  
  if args.build_env:
    DockerEnv.build()
  elif args.shell:
    DockerEnv.shell()

if __name__ == '__main__':
  main()
